# MACRO(SUBDIRLIST result curdir)
#     FILE(GLOB children ${curdir}/*) # This was changed
#     SET(dirlist "")
#     FOREACH(child ${children})
#         IF(IS_DIRECTORY ${child}) # This was changed
#             LIST(APPEND dirlist ${child})
#         ENDIF()
#     ENDFOREACH()
#     SET(${result} ${dirlist})
# ENDMACRO()

# add_library(NV_VulkanCommon INTERFACE)
# # SUBDIRLIST(SUBDIRS ${CMAKE_CURRENT_SOURCE_DIR})
# set(SUBDIRS Buffer Debug Window Initializers Device SwapChain Instance PipelineInitializers Setup)
# FOREACH(subdir ${SUBDIRS})
# ADD_SUBDIRECTORY(${subdir})
# list(APPEND NV_VULKAN_INCLUDE_DIRECTORIES ${CMAKE_CURRENT_SOURCE_DIR}/${subdir})
# # get_filename_component(libname "${subdir}.cpp" NAME_WE)
# list(APPEND NV_VULKAN_LIBRARIES "NV_Vulkan${subdir}")
# ENDFOREACH()

# message(STATUS ${NV_VULKAN_INCLUDE_DIRECTORIES})
# foreach(LIB ${NV_VULKAN_LIBRARIES})
# target_link_libraries(${LIB} PUBLIC Vulkan::Vulkan)
# target_link_libraries(${LIB} INTERFACE NV_VulkanCommon)
# target_include_directories(${LIB} PUBLIC "${CMAKE_CURRENT_SOURCE_DIR}" ${NV_VULKAN_INCLUDE_DIRECTORIES})
# endforeach()

file(GLOB NV_VULKAN_SRC_FILES ${CMAKE_CURRENT_SOURCE_DIR}/*.cpp)
file(GLOB NV_VULKAN_HEADER_FILES ${CMAKE_CURRENT_SOURCE_DIR}/*.hpp)
set(NV_VULKAN_SEPARATE_LIBS OFF)
if(NV_VULKAN_SEPARATE_LIBS)
foreach(NV_VULKAN_SRC ${NV_VULKAN_SRC_FILES})
get_filename_component(libname "${NV_VULKAN_SRC}" NAME_WE)
add_library(${libname} STATIC ${NV_VULKAN_SRC})
target_link_libraries(${libname} PUBLIC Vulkan::Vulkan glfw3 imgui)
target_precompile_headers(${libname} PUBLIC ${NV_VULKAN_HEADER_FILES})
list(APPEND NV_VULKAN_LIBRARIES ${libname})
endforeach()

target_link_libraries(NV_VulkanDevice PUBLIC NV_Vulkan NV_VulkanInitializers NV_VulkanBuffer)
target_link_libraries(NV_VulkanInstance PUBLIC NV_VulkanDevice NV_VulkanSwapChain)
target_link_libraries(NV_VulkanSetup PUBLIC NV_Vulkan NV_VulkanInstance NV_VulkanDebug NV_VulkanInitializers NV_VulkanPipelineInitializers NV_VulkanUtils)
target_link_libraries(NV_VulkanWindow PUBLIC NV_VulkanInstance)
target_link_libraries(NV_VulkanSwapChain PUBLIC NV_Vulkan NV_VulkanInitializers)
target_link_libraries(NV_VulkanPipelineInitializers PUBLIC NV_VulkanInstance NV_Vulkan)
target_link_libraries(NV_WindowCallbacks PUBLIC glfw3)
add_dependencies(NV_VulkanglTFModel NV_VulkanDevice)
target_link_libraries(NV_VulkanglTFModel PUBLIC NV_VulkanDevice)
else()
add_library(NV_Vulkan STATIC ${NV_VULKAN_SRC_FILES} ${NV_VULKAN_HEADER_FILES})
target_precompile_headers(NV_Vulkan PUBLIC ${NV_VULKAN_HEADER_FILES})
target_link_libraries(NV_Vulkan PUBLIC Vulkan::Vulkan glfw3 imgui ktx)
endif()
