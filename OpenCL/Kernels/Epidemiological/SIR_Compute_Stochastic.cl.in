#include <SIR_Stochastic.cl>
// #include "../Distributions/Distributions.cl"

void assignVec(local float* a, constant float* b, uint N)
{
    for (int i = 0; i < N; i++)
    {
        a[i] = b[i];
    }
}

void assignVec_g(global float* a, local float* b, uint N)
{
    for (int i = 0; i < N; i++)
    {
        a[i] = b[i];
    }
}

__kernel void SIR_Compute_Stochastic_f32(constant ulong* seeds, constant  uint* x0, global float* x_traj, local float* x_traj_loc, float dt, uint Nt, constant float* param)
{

    for (int i = 0; i < 3*Nt; i++)
    {
        x_traj_loc[i] = 0;
    }
    assignVec(x_traj_loc, x0, 3);

    uint id = get_local_id(0);
    uint work_dim = get_work_dim();
    @NV_CL_PRNG_TYPE@_state state;
    for (int i = 0; i < 10; i++)
    {
	@NV_CL_PRNG_TYPE@_seed(&state, seeds[id]);
    }
    printf("seed: %i\n", seeds[id]);

    for (uint i = 0; i < Nt; i++)
    {
        SIR_Stochastic_Binomial_f32(&x_traj_loc[3*i], &x_traj_loc[3*(i+1)], param, dt, &state);
    }

    assignVec_g(&x_traj[3*(Nt+1)*id], x_traj_loc, 3*(Nt+1));
}